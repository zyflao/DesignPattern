单一职责：有且只有一个原因引起一个类改变
里氏替换法则：父类出现的地方，子类能出现
依赖倒置原则：高层模块不应该依赖底层模块，两证应该依赖抽象。2抽象不应该依赖细节。3 细节应该依赖抽象
接口隔离：类间的依赖关系应该建立在最小的接口上。客户端不应该依赖他不需要的接口。接口细化，方法经量少。单一原则一个接口可以有多个方法。
迪米特：最少知道
开闭原则：对删，改关闭;对新增开放
solid

1	创建型模式
这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用新的运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。	
工厂模式（Factory Pattern）
抽象工厂模式（Abstract Factory Pattern）
单例模式（Singleton Pattern）
建造者模式（Builder Pattern）
原型模式（Prototype Pattern）
2	结构型模式
这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。	
适配器模式（Adapter Pattern） 把一个类 适配成 另外一个类.A a = adepter(B b);通过适配 把b 适配成a类。
桥接模式（Bridge Pattern）身体与灵魂.Soul s = bridge(soul,pig)
过滤器模式（Filter、Criteria Pattern） 
组合模式（Composite Pattern）
装饰器模式（Decorator Pattern）
外观模式（Facade Pattern）
享元模式（Flyweight Pattern）
代理模式（Proxy Pattern）
3	行为型模式
策略模式 : 把算法interface组装在类中，通过set方法，实例化对象
模板模式 ：抽象类,规定了方法的步骤。具体由子类实现
观察者：
命令模式 Command
迭代器

责任链 
备忘录  Memento
中介者 Mediator 聊天室。user调用chatRoom
状态模式 State
解释器 Interpreter
访问者 Visitor

(23中设计模式不包括这个)空对象模式（Null Object Pattern）


责任链模式（Chain of Responsibility Pattern）
命令模式（Command Pattern）
解释器模式（Interpreter Pattern）
迭代器模式（Iterator Pattern）
中介者模式（Mediator Pattern）
备忘录模式（Memento Pattern）
观察者模式（Observer Pattern）
状态模式（State Pattern）
空对象模式（Null Object Pattern）
策略模式（Strategy Pattern）
模板模式（Template Pattern）
访问者模式（Visitor Pattern）

 三者的区别与联系

1，中介者模式：A，B之间的对话通过C来传达。A,B可以互相不认识（减少了A和B对象间的耦合）ps：行为类型模式。其他三个是结构

2，代理模式：A要送B礼物，A,B互相不认识，那么A可以找C来帮它实现送礼物的愿望（封装了A对象）
3，外观模式：A和B都要实现送花，送巧克力的方法，那么我可以通过一个抽象类C实现送花送巧克力的方法（A和B都继承C）。（封装了A，B子类）
代理模式和外观者模式这两种模式主要不同就是代理模式针对的是单个对象，而外观模式针对的是所有子类。
4 装饰模式，和代理模式很像。都是实现了需要代理或者装饰类的接口。区别是 代理模式隐藏了实现，但是装饰模式 暴露了实现